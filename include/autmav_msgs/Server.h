/* Auto-generated by genmsg_cpp for file /home/hojat/WS/sandbox/Marvel/msg/Server.msg */
#ifndef VANGAURD_MESSAGE_SERVER_H
#define VANGAURD_MESSAGE_SERVER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Vangaurd
{
template <class ContainerAllocator>
struct Server_ {
  typedef Server_<ContainerAllocator> Type;

  Server_()
  : armed(false)
  , ready(false)
  , p(0.0)
  , q(0.0)
  , r(0.0)
  , phi(0.0)
  , theta(0.0)
  , psi(0.0)
  , phi_dot(0.0)
  , theta_dot(0.0)
  , psi_dot(0.0)
  , x_acc(0.0)
  , y_acc(0.0)
  , z_acc(0.0)
  , v_z(0.0)
  , lidar(0.0)
  {
  }

  Server_(const ContainerAllocator& _alloc)
  : armed(false)
  , ready(false)
  , p(0.0)
  , q(0.0)
  , r(0.0)
  , phi(0.0)
  , theta(0.0)
  , psi(0.0)
  , phi_dot(0.0)
  , theta_dot(0.0)
  , psi_dot(0.0)
  , x_acc(0.0)
  , y_acc(0.0)
  , z_acc(0.0)
  , v_z(0.0)
  , lidar(0.0)
  {
  }

  typedef uint8_t _armed_type;
  uint8_t armed;

  typedef uint8_t _ready_type;
  uint8_t ready;

  typedef float _p_type;
  float p;

  typedef float _q_type;
  float q;

  typedef float _r_type;
  float r;

  typedef float _phi_type;
  float phi;

  typedef float _theta_type;
  float theta;

  typedef float _psi_type;
  float psi;

  typedef float _phi_dot_type;
  float phi_dot;

  typedef float _theta_dot_type;
  float theta_dot;

  typedef float _psi_dot_type;
  float psi_dot;

  typedef float _x_acc_type;
  float x_acc;

  typedef float _y_acc_type;
  float y_acc;

  typedef float _z_acc_type;
  float z_acc;

  typedef float _v_z_type;
  float v_z;

  typedef float _lidar_type;
  float lidar;


  typedef boost::shared_ptr< ::Vangaurd::Server_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Vangaurd::Server_<ContainerAllocator>  const> ConstPtr;
}; // struct Server
typedef  ::Vangaurd::Server_<std::allocator<void> > Server;

typedef boost::shared_ptr< ::Vangaurd::Server> ServerPtr;
typedef boost::shared_ptr< ::Vangaurd::Server const> ServerConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Vangaurd::Server_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Vangaurd::Server_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Vangaurd

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Vangaurd::Server_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Vangaurd::Server_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Vangaurd::Server_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bfbcc1cb7ec3a2aaa8eaaf527158ec25";
  }

  static const char* value(const  ::Vangaurd::Server_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbfbcc1cb7ec3a2aaULL;
  static const uint64_t static_value2 = 0xa8eaaf527158ec25ULL;
};

template<class ContainerAllocator>
struct DataType< ::Vangaurd::Server_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Vangaurd/Server";
  }

  static const char* value(const  ::Vangaurd::Server_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Vangaurd::Server_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool armed\n\
bool ready\n\
\n\
float32 p\n\
float32 q\n\
float32 r\n\
float32 phi\n\
float32 theta\n\
float32 psi\n\
float32 phi_dot\n\
float32 theta_dot\n\
float32 psi_dot\n\
float32 x_acc\n\
float32 y_acc\n\
float32 z_acc\n\
\n\
float32 v_z\n\
float32 lidar\n\
\n\
";
  }

  static const char* value(const  ::Vangaurd::Server_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Vangaurd::Server_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Vangaurd::Server_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.armed);
    stream.next(m.ready);
    stream.next(m.p);
    stream.next(m.q);
    stream.next(m.r);
    stream.next(m.phi);
    stream.next(m.theta);
    stream.next(m.psi);
    stream.next(m.phi_dot);
    stream.next(m.theta_dot);
    stream.next(m.psi_dot);
    stream.next(m.x_acc);
    stream.next(m.y_acc);
    stream.next(m.z_acc);
    stream.next(m.v_z);
    stream.next(m.lidar);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Server_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Vangaurd::Server_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Vangaurd::Server_<ContainerAllocator> & v) 
  {
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    s << indent << "ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready);
    s << indent << "p: ";
    Printer<float>::stream(s, indent + "  ", v.p);
    s << indent << "q: ";
    Printer<float>::stream(s, indent + "  ", v.q);
    s << indent << "r: ";
    Printer<float>::stream(s, indent + "  ", v.r);
    s << indent << "phi: ";
    Printer<float>::stream(s, indent + "  ", v.phi);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "psi: ";
    Printer<float>::stream(s, indent + "  ", v.psi);
    s << indent << "phi_dot: ";
    Printer<float>::stream(s, indent + "  ", v.phi_dot);
    s << indent << "theta_dot: ";
    Printer<float>::stream(s, indent + "  ", v.theta_dot);
    s << indent << "psi_dot: ";
    Printer<float>::stream(s, indent + "  ", v.psi_dot);
    s << indent << "x_acc: ";
    Printer<float>::stream(s, indent + "  ", v.x_acc);
    s << indent << "y_acc: ";
    Printer<float>::stream(s, indent + "  ", v.y_acc);
    s << indent << "z_acc: ";
    Printer<float>::stream(s, indent + "  ", v.z_acc);
    s << indent << "v_z: ";
    Printer<float>::stream(s, indent + "  ", v.v_z);
    s << indent << "lidar: ";
    Printer<float>::stream(s, indent + "  ", v.lidar);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VANGAURD_MESSAGE_SERVER_H

