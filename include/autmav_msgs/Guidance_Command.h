/* Auto-generated by genmsg_cpp for file /home/hojat/WS/sandbox/Marvel/msg/Guidance_Command.msg */
#ifndef VANGAURD_MESSAGE_GUIDANCE_COMMAND_H
#define VANGAURD_MESSAGE_GUIDANCE_COMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Vangaurd
{
template <class ContainerAllocator>
struct Guidance_Command_ {
  typedef Guidance_Command_<ContainerAllocator> Type;

  Guidance_Command_()
  : throttle(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , arm(false)
  , mode(0)
  {
  }

  Guidance_Command_(const ContainerAllocator& _alloc)
  : throttle(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , arm(false)
  , mode(0)
  {
  }

  typedef float _throttle_type;
  float throttle;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _yaw_type;
  float yaw;

  typedef uint8_t _arm_type;
  uint8_t arm;

  typedef uint8_t _mode_type;
  uint8_t mode;


  typedef boost::shared_ptr< ::Vangaurd::Guidance_Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Vangaurd::Guidance_Command_<ContainerAllocator>  const> ConstPtr;
}; // struct Guidance_Command
typedef  ::Vangaurd::Guidance_Command_<std::allocator<void> > Guidance_Command;

typedef boost::shared_ptr< ::Vangaurd::Guidance_Command> Guidance_CommandPtr;
typedef boost::shared_ptr< ::Vangaurd::Guidance_Command const> Guidance_CommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Vangaurd::Guidance_Command_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Vangaurd::Guidance_Command_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Vangaurd

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Vangaurd::Guidance_Command_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Vangaurd::Guidance_Command_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Vangaurd::Guidance_Command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "860c99db662785ea7a1f3796451da869";
  }

  static const char* value(const  ::Vangaurd::Guidance_Command_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x860c99db662785eaULL;
  static const uint64_t static_value2 = 0x7a1f3796451da869ULL;
};

template<class ContainerAllocator>
struct DataType< ::Vangaurd::Guidance_Command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Vangaurd/Guidance_Command";
  }

  static const char* value(const  ::Vangaurd::Guidance_Command_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Vangaurd::Guidance_Command_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 throttle\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
bool arm\n\
uint8 mode\n\
\n\
\n\
";
  }

  static const char* value(const  ::Vangaurd::Guidance_Command_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Vangaurd::Guidance_Command_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Vangaurd::Guidance_Command_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.throttle);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
    stream.next(m.arm);
    stream.next(m.mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Guidance_Command_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Vangaurd::Guidance_Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Vangaurd::Guidance_Command_<ContainerAllocator> & v) 
  {
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VANGAURD_MESSAGE_GUIDANCE_COMMAND_H

