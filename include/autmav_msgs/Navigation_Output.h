/* Auto-generated by genmsg_cpp for file /home/hojat/WS/sandbox/Marvel/msg/Navigation_Output.msg */
#ifndef VANGAURD_MESSAGE_NAVIGATION_OUTPUT_H
#define VANGAURD_MESSAGE_NAVIGATION_OUTPUT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Vangaurd
{
template <class ContainerAllocator>
struct Navigation_Output_ {
  typedef Navigation_Output_<ContainerAllocator> Type;

  Navigation_Output_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , phi(0.0)
  , theta(0.0)
  , psi(0.0)
  , vx(0.0)
  , vy(0.0)
  , vz(0.0)
  , phi_dot(0.0)
  , theta_dot(0.0)
  , psi_dot(0.0)
  {
  }

  Navigation_Output_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , phi(0.0)
  , theta(0.0)
  , psi(0.0)
  , vx(0.0)
  , vy(0.0)
  , vz(0.0)
  , phi_dot(0.0)
  , theta_dot(0.0)
  , psi_dot(0.0)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _z_type;
  float z;

  typedef float _phi_type;
  float phi;

  typedef float _theta_type;
  float theta;

  typedef float _psi_type;
  float psi;

  typedef float _vx_type;
  float vx;

  typedef float _vy_type;
  float vy;

  typedef float _vz_type;
  float vz;

  typedef float _phi_dot_type;
  float phi_dot;

  typedef float _theta_dot_type;
  float theta_dot;

  typedef float _psi_dot_type;
  float psi_dot;


  typedef boost::shared_ptr< ::Vangaurd::Navigation_Output_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Vangaurd::Navigation_Output_<ContainerAllocator>  const> ConstPtr;
}; // struct Navigation_Output
typedef  ::Vangaurd::Navigation_Output_<std::allocator<void> > Navigation_Output;

typedef boost::shared_ptr< ::Vangaurd::Navigation_Output> Navigation_OutputPtr;
typedef boost::shared_ptr< ::Vangaurd::Navigation_Output const> Navigation_OutputConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Vangaurd::Navigation_Output_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Vangaurd::Navigation_Output_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Vangaurd

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Vangaurd::Navigation_Output_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Vangaurd::Navigation_Output_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Vangaurd::Navigation_Output_<ContainerAllocator> > {
  static const char* value() 
  {
    return "607483d4b36897f647c3ef37b0a993ca";
  }

  static const char* value(const  ::Vangaurd::Navigation_Output_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x607483d4b36897f6ULL;
  static const uint64_t static_value2 = 0x47c3ef37b0a993caULL;
};

template<class ContainerAllocator>
struct DataType< ::Vangaurd::Navigation_Output_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Vangaurd/Navigation_Output";
  }

  static const char* value(const  ::Vangaurd::Navigation_Output_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Vangaurd::Navigation_Output_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x\n\
float32 y\n\
float32 z\n\
float32 phi\n\
float32 theta\n\
float32 psi\n\
float32 vx\n\
float32 vy\n\
float32 vz\n\
float32 phi_dot\n\
float32 theta_dot\n\
float32 psi_dot\n\
\n\
\n\
";
  }

  static const char* value(const  ::Vangaurd::Navigation_Output_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Vangaurd::Navigation_Output_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Vangaurd::Navigation_Output_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.phi);
    stream.next(m.theta);
    stream.next(m.psi);
    stream.next(m.vx);
    stream.next(m.vy);
    stream.next(m.vz);
    stream.next(m.phi_dot);
    stream.next(m.theta_dot);
    stream.next(m.psi_dot);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Navigation_Output_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Vangaurd::Navigation_Output_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Vangaurd::Navigation_Output_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "phi: ";
    Printer<float>::stream(s, indent + "  ", v.phi);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "psi: ";
    Printer<float>::stream(s, indent + "  ", v.psi);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "phi_dot: ";
    Printer<float>::stream(s, indent + "  ", v.phi_dot);
    s << indent << "theta_dot: ";
    Printer<float>::stream(s, indent + "  ", v.theta_dot);
    s << indent << "psi_dot: ";
    Printer<float>::stream(s, indent + "  ", v.psi_dot);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VANGAURD_MESSAGE_NAVIGATION_OUTPUT_H

